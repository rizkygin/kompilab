{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","member","color","img","date","Date","menu","setState","react_default","a","createElement","src","width","_this2","timerID","setInterval","tick","clearInterval","_this3","id","className","items","map","index","style","concat","onClick","clicked","bind","key","galery","toLocaleTimeString","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKCwHzBC,2BAnHb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CAEXC,OAAS,OACTC,MAAQ,QACRC,IAAM,WAENC,KAAM,IAAIC,MATIZ,uEAYVa,GAENV,KAAKW,SAAS,CAEZN,OAASK,EAAKL,OACdC,MAAQI,EAAKJ,MACbC,IAAMG,EAAKH,uCA0Bb,OAAOK,EAAAC,EAAAC,cAAA,OAAKC,IAAK,OAAOf,KAAKI,MAAMG,IAAKS,MAAM,oDAG7B,IAAAC,EAAAjB,KACjBA,KAAKkB,QAAUC,YACb,kBAAMF,EAAKG,QAAO,kDAKpBC,cAAcrB,KAAKkB,wCAInBlB,KAAKW,SAAS,CACZH,KAAO,IAAIC,wCAIN,IAAAa,EAAAtB,KACP,OACEY,EAAAC,EAAAC,cAAA,OAAKS,GAAG,OAGNX,EAAAC,EAAAC,cAAA,MAAIU,UAAU,QAAd,aACAZ,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OAAOxB,KAAKJ,MAAM6B,MAAMC,IAAI,SAAChB,EAAKiB,GAC7C,IAAIC,EAAQ,OAOZ,OAJGN,EAAKlB,MAAME,QAAUI,EAAKJ,QAC3BsB,EAAK,GAAAC,OAAMD,EAAN,eAGAhB,EAAAC,EAAAC,cAAA,KACLU,UAAaI,EAAM,IAAIlB,EAAKJ,MAE5BwB,QAAWR,EAAKS,QAAQC,KAAKV,EAAKZ,GAClCuB,IAAON,GAENjB,EAAKL,WAiBZO,EAAAC,EAAAC,cAAA,OAAKU,UAAa,QAAlB,cACaZ,EAAAC,EAAAC,cAAA,QAAMU,UAAa,YAAYxB,KAAKI,MAAME,OAAQN,KAAKI,MAAMC,QAAcO,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAC1Fd,KAAKkC,UAIRtB,EAAAC,EAAAC,cAAA,OAAKU,UAAU,QACbZ,EAAAC,EAAAC,cAAA,0BAAkBd,KAAKI,MAAMI,KAAK2B,qBAAlC,cA5GQC,cCQZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhD,QACf0C,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KClEjEC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,CAAKvC,MAvBP,CACZ,CACEpB,OAAS,OACTC,MAAQ,QACRC,IAAM,YAER,CACEF,OAAS,OACTC,MAAQ,OACRC,IAAM,YAEP,CACCF,OAAS,OACTC,MAAQ,SACRC,IAAM,YAEP,CACCF,OAAS,OACTC,MAAQ,OACRC,IAAM,eAKR0D,SAASC,eAAe,SDTnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,QAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,OAAQ,WAC9B,IAAM3B,EAAK,GAAAf,OAAMuC,QAAN,sBAEP/B,GAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,GACHK,KAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,KAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,KAAK,WAC7BV,OAAOC,SAASyC,aAKpBtC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFAyB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,KAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MChB/BE","file":"static/js/main.f0f11531.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    //default\n    this.state = {\n      // active : \"Merah\",\n      member : \"Lisa\",\n      color : \"merah\",\n      img : \"lisa.jpg\",\n      //date state\n      date: new Date(),\n    };\n  }\n  clicked(menu){\n    //untuk memperbarui state sesuai dengan menu yang dipilih\n    this.setState({\n      // active: menu,\n      member : menu.member,\n      color : menu.color,\n      img : menu.img,   \n    });\n  }\n  // cara 1 nampilin gambar\n  // menusaya(){\n  //   //gambar harus sesuai dengan nama statenya\n  //   return <img src={\"img/\"+this.state.active+\".jpg\"} width=\"300\"></img>\n  // }\n  // // cara 2 nampilin gambar\n  // menusaya2(){\n  //   //menyimpan var gambar dan mengubah nama gambar sesuai statenya\n  //   var gambar;\n  //   if(this.state.active.toLocaleLowerCase() === 'merah'){\n  //     gambar = \"gege\";\n  //   } else if(this.state.active.toLocaleLowerCase() === 'kuning'){\n  //     gambar = \"isyana\";\n  //   } else if(this.state.active.toLocaleLowerCase() === 'hijau'){\n  //     gambar = \"chelsea\";\n  //   } else if(this.state.active.toLocaleLowerCase() === 'biru'){\n  //     gambar = \"velove\";\n  //   }\n  //   return <img src={\"img/\"+gambar+\".jpg\"} width=\"300\"></img>\n  // }\n\n  //cara 3 passing data langsung ke state\n  galery(){\n    return <img src={\"img/\"+this.state.img} width=\"300\"></img>\n  }\n\n  componentDidMount(){\n    this.timerID = setInterval(\n      () => this.tick(),1000,\n    );\n  }\n\n  componentWillMount(){\n    clearInterval(this.timerID);\n  }\n\n  tick(){\n    this.setState({\n      date : new Date(),\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"app\"> \n        { /* map akan loop sebanyak menu yang didefinisikan*/ }\n        {/* kemudian mengembalikan elemen <a/> */}\n        <h2 className=\"info\">BlackPink</h2>\n        <nav className=\"nav\">{this.props.items.map((menu,index) => {\n            var style = 'menu';\n\n            //penamaan state color tidak harus sesuai pada menu.\n            if(this.state.color === menu.color){\n              style = `${style} is-active`;\n            }\n\n            return <a\n              className = {style+\" \"+menu.color}\n              //bind untuk membuat 'menu' bisa dikirim ke fungsi 'clicked'\n              onClick = {this.clicked.bind(this,menu)} // guanakan this karena clicked merupakan fungsi yang dibuat sendiri dan global\n              key = {index}\n            >\n              {menu.member}\n            </a>;\n          }\n        )}\n        </nav>\n\n        {/* gambar dan menu cara 1 dan 2 dengan menu dan active*/}\n        {/* <div className =  \"info\">\n          ini adalah <span className = {\"selected \"+this.state.active}>{this.state.active}</span><br/><br/>\n          {this.menusaya2()}\n        </div> */}\n        \n        {/* cara memanggil gambar sebagai background dengan css  */}\n        {/* <div className = {\"gambar \"+this.state.active}>\n        </div> */}\n\n        {/* gambar dan menu cara 3 dengan menu.member */}\n        <div className =  \"info\">\n          ini adalah <span className = {\"selected \"+this.state.color}>{this.state.member}</span><br/><br/>\n          {this.galery()}\n          {/* <img src={\"img/\"+this.state.img} width=\"300\"></img> */}\n        </div>\n\n        <div className=\"info\">\n          <h2>Sekarang jam {this.state.date.toLocaleTimeString()}.</h2>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Custom.css'; //import cssnya\nimport App from './App'; \nimport * as serviceWorker from './serviceWorker'; // agar dapat di akses ofline\n\n// const items = ['Merah','Kuning','Hijau','Biru'];  \nconst items = [\n  {\n    member : 'Lisa',\n    color : 'merah',\n    img : 'lisa.jpg',\n  },\n  {\n    member : 'Jeni',\n    color : 'pink',\n    img : 'jeni.jpg',\n  }\n  ,{\n    member : 'Rose',\n    color : 'kuning',\n    img : 'rose.jpg',\n  }\n  ,{\n    member : 'Jiso',\n    color : 'biru',\n    img : 'jiso.jpg',\n  },\n];\n\nReactDOM.render(<App items={items}/>,\n  document.getElementById('root')  \n);\n\nserviceWorker.register(); // service worker agar dapat di akses ofline.. ganti unregister agar hanya dapat di akses online\n"],"sourceRoot":""}